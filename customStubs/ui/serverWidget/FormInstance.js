/*jshint esversion: 5*/
define(['./Button', './Field', './FieldGroup', './Sublist', './Tab'], function(Button, Field, FieldGroup, Sublist, Tab) {
    /**
     * @class Form
     * @classdesc Primary object used to encapsulate a NetSuite-looking form.
     * After you create a Form object, you can add a variety of scriptable elements to the form including fields, links, buttons, tabs, and sublists.
     * @protected
     * @constructor
     *
     * @since 2015.2
     */
    function Form() {

        /**
         * Array of Field instances
         * @name Form#fields
         * @type {Array}
         */
        this.fields = [];
        /**
         * Array of Button instances
         * @name Form#buttons
         * @type {Array}
         */
        this.buttons = [];
        /**
         * Array of Field Group instances
         * @name Form#fieldgroups
         * @type {Array}
         */
        this.fieldGroups = [];
        /**
         * Array of Sublist instances
         * @name Form#sublists
         * @type {Array}
         */
        this.sublists = [];
        /**
         * Array of Tab instances
         * @name Form#tabs
         * @type {Array}
         */
        this.tabs = [];
        /**
         * Array of Subtabs instances
         * @name Form#subtabs
         * @type {Array}
         */
        this.subtabs = [];
        /**
         * The form title
         * @name Form#title
         * @type {string}
         *
         * @since 2015.2
         */
        this.title = undefined;
        /**
         * This method is called during a beforeLoad UE or a suitelet and the message is later displayed on the client side,
         * once the pageInit script is completed. The method takes either an already created Message object or the options
         * object that would be used for creating the message.
         * User event context can be used to control whether the message is shown on records in view, create, or edit mode (not applicable for Suitelets).
         * @restriction Server SuiteScript only
         * @governance none
         * @param {Object|Message} options config object OR the message options object to be displayed in browser, described in N/ui/message: create()
         * @param {Message} options.message the message object to be displayed in browser, described in N/ui/message: create()
         * @return {void}
         * @throws {error.SuiteScriptError} WRONG_PARAMETER_TYPE if supplied options parameter is not an object
         *
         * @since 2018.2
         */
        this.addPageInitMessage = function(options) {
            if (options === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "serverWidget.addPageInitMessage: Missing a required argument: options"
                    );
            }
        };

        /**
         * Adds a button to the ui form
         * @restriction Server SuiteScript only
         * @governance none
         * @param {Object} options
         * @param {string} options.id The script id of button. If you are adding the button to an existing page, the id must be in lowercase, contain no spaces, and include the prefix custpage.
         * @param {string} options.label The label of button
         * @param {string} [options.functionName] The function name to be triggered on a click event.
         * @return {Button}
         * @throws {SuiteScriptError} SSS_MISSING_REQD_ARGUMENT when id or label parameter is missing
         *
         * @since 2015.2
         */
        this.addButton = function(options) {
            if (options.id === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.addButton: Missing a required argument: id"
                );
            }
            if (options.label === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.addButton: Missing a required argument: label"
                );
            }
            var button = Object.assign({}, Button);
            button.id = options.id;
            button.label = options.label;
            if (options.functionName && typeof options.functionName === "string") {
                button.functionName = options.functionName;
            }
            this.buttons.push(button);
            return button;
        };

        /**
         * Adds a text field that lets you store credentials in NetSuite to be used when invoking services provided by third parties. The GUID generated by this field can be reused multiple times until the script executes again.
         * @restriction Server SuiteScript only
         * @governance none
         * @param {Object} options
         * @param {string} options.id The script id of field
         * @param {string} options.label The label of field
         * @param {Array<string>|string} options.restrictToDomains  Domain or list of domains that restricts the destination domains for the credentials, such as 'www.mysite.com'. Credentials cannot be sent to a domain that is not specified here.
         * @param {Array<string>|string} options.restrictToScriptIds  The list of IDs of the scripts where this credential field can be used
         * @param {boolean} [options.restrictToCurrentUser=false] Controls whether the use of this credential is restricted to the same user that originally entered it.
         * By default, the value is false, which means that multiple users can use the credential.
         * @param {string} [options.container]  Id of the form tab where the credential is placed. By default, the field is added to the main section of the form.
         * @return {Field}
         * @throws {SuiteScriptError} SSS_MISSING_REQD_ARGUMENT when any required parameter is missing
         *
         * @since 2015.2
         */
        this.addCredentialField = function(options) {
            if (options.id === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.addCredentialField: Missing a required argument: id"
                );
            }
            if (options.label === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.addCredentialField: Missing a required argument: label"
                );
            }
            var field = Object.assign({}, Field);
            field.id = options.id;
            field.label = options.label;
            if (options.restrictToDomains) {
                field.restrictToDomains = options.restrictToDomains;
            }
            if (options.restrictToScriptIds) {
                field.restrictToScriptIds = options.restrictToScriptIds;
            }
            field.restrictToCurrentUser = options.restrictToCurrentUser || false;
            if (options.container) {
                field.container = options.container;
            }
            this.fields.push(field);
            return field;
        };

        /**
         * Adds a secret key field to the form. This key can be used in crypto modules to perform encryption or hashing.
         * The default maximum length for a secret key field is 32 characters. If needed, use the Field.maxLength property to change this value.
         * @restriction Server SuiteScript only
         * @governance none                                       `
         * @param {Object} options
         * @param {string} options.id The script id of field. The id must be in lowercase, contain no spaces, and include the prefix custpage if you are adding the field to an existing page.
         * @param {string} options.label The UI label for the field.
         * @param {Array<string>|string} [options.restrictToScriptIds]  The list of IDs of the scripts where the key can be used.
         * @param {boolean} [options.restrictToCurrentUser=false] Controls whether use of this secret key is restricted to the same user that originally entered the key. By default, the value is false, which means that multiple users can use the key.
         * @param {string} [options.container]  Id of the form tab or group where the key is placed. By default, the field is added to the main section of the form.
         * @return {Field}
         * @throws {SuiteScriptError} SSS_MISSING_REQD_ARGUMENT when id, label or restrictToScriptIds parameter is missing
         *
         * @since 2015.2
         */
        this.addSecretKeyField = function(options) {
            if (options.id === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.addSecretKeyField: Missing a required argument: id"
                );
            }
            if (options.label === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.addSecretKeyField: Missing a required argument: label"
                );
            }
            var field = Object.assign({}, Field);
            field.id = options.id;
            field.label = options.label;
            if (options.restrictToScriptIds) {
                field.restrictToScriptIds = options.restrictToScriptIds;
            }
            field.restrictToCurrentUser = options.restrictToCurrentUser || false;
            if (options.container) {
                field.container = options.container;
            }
            this.fields.push(field);
            return field;
        };

        /**
         * Adds a field to the form
         * @restriction Server SuiteScript only
         * @governance none
         * @param {Object} options
         * @param {string} options.id Script id for the field. The id must be in lowercase, contain no spaces, and include the prefix custpage if you are adding the field to an existing page.
         * @param {string} options.label UI label for the field
         * @param {string} options.type  Type of the field. Use the serverWidget.FieldType enum to set the field type.
         * @param {string} [options.source]  The internalId or scriptId of the source list for this field if it is a select (List/Record) or multi-select field
         * @param {string} [options.container]   ID of the field group or tab where to place the field. By default, the field is added to the main section of the form.
         * @return {Field}
         * @throws {SuiteScriptError} SSS_MISSING_REQD_ARGUMENT when id, label or type parameter is missing
         *
         * @since 2015.2
         */
        this.addField = function(options) {
            if (options.id === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.addField: Missing a required argument: id"
                );
            }
            if (options.label === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.addField: Missing a required argument: label"
                );
            }
            if (options.type === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.addField: Missing a required argument: type"
                );
            }
            if (new serverWidgetFieldType()[options.type.toUpperCase()] === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_INVALID_TYPE_ARG",
                    "You have entered an invalid type argument: "+options.type.toUpperCase()
                );
            }
            var field = Object.assign({}, Field);
            field.id = options.id;
            field.label = options.label;
            field.type = options.type;
            if (options.container) {
                field.container = options.container;
            }
            if (options.source) {
                field.source = options.source;
            }
            this.fields.push(field);
            return field;
        };

        /**
         * Adds a field group to the form
         * @restriction Server SuiteScript only
         * @governance none
         * @param {Object} options
         * @param {string} options.id the script id for field group
         * @param {string} options.label the label for field group
         * @param {string} [options.tab] ID of the tab where to place the field group. By default, the field group is added to the main section of the form.
         *
         * @return {FieldGroup}
         * @throws {SuiteScriptError} SSS_MISSING_REQD_ARGUMENT when id or label parameter is missing
         *
         * @since 2015.2
         */
        this.addFieldGroup = function(options) {
            if (options.id === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.addFieldGroup: Missing a required argument: id"
                );
            }
            if (options.label === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.addFieldGroup: Missing a required argument: label"
                );
            }
            var fieldGroup = Object.assign({}, FieldGroup);
            fieldGroup.id = options.id;
            fieldGroup.label = options.label;
            if (options.tab) {
                fieldGroup.tab = options.tab;
            }
            this.fieldGroups.push(fieldGroup);
            return fieldGroup;
        };

        /**
         * Adds a link to the form
         * @restriction Server SuiteScript only
         * @governance none
         * @param {Object} options
         * @param {string} options.type The type of link. Use the serverWidget.FormPageLinkType enum to set the value."
         * @param {string} options.title The UI label for the link.
         * @param {string} options.url The URL for the link.
         * @return {void}
         * @throws {SuiteScriptError} SSS_MISSING_REQD_ARGUMENT when type, title or url parameter is missing
         *
         * @since 2015.2
         */
        this.addPageLink = function(options) {
            if (options.type === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.addPageLink: Missing a required argument: type"
                );
            }
            if (options.title === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.addPageLink: Missing a required argument: title"
                );
            }
            if (options.url === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.addPageLink: Missing a required argument: url"
                );
            }
            if (new serverWidgetFormPageLinkType()[options.type.toUpperCase()] === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_INVALID_TYPE_ARG",
                    "You have entered an invalid type argument: "+options.type.toUpperCase()
                );
            }
        };

        /**
         * Adds a Sublist to the form
         * @restriction Server SuiteScript only
         * @governance none
         * @param {Object} options
         * @param {string} options.id  The script id for the sublist. The id must be in lowercase, contain no spaces, and include the prefix custpage if you are adding the sublist to an existing page.
         * @param {string} options.label The ui label for the sublist
         * @param {string} options.type  The type of sublist. Use the serverWidget.SublistType enum to set the value.
         * @param {string} [options.tab] ID of the tab where to add the sublist to. By default, the sublist is added to the main tab.
         * @return {Sublist}
         * @throws {SuiteScriptError} SSS_MISSING_REQD_ARGUMENT when id, label or type parameter is missing
         *
         * @since 2015.2
         */
        this.addSublist = function(options) {
            if (options.id === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.addSublist: Missing a required argument: id"
                );
            }
            if (options.label === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.addSublist: Missing a required argument: label"
                );
            }
            if (options.type === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.addSublist: Missing a required argument: type"
                );
            }
            if (new serverWidgetSublistType()[options.type.toUpperCase()] === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_INVALID_TYPE_ARG",
                    "You have entered an invalid type argument: "+options.type.toUpperCase()
                );
            }
            var sublist = Object.assign({}, Sublist);
            sublist.id = options.id;
            sublist.label = options.label;
            sublist.type = options.type;
            if (options.tab) {
                sublist.tab = options.tab;
            }
            this.sublists.push(sublist);
            return sublist;
        };

        /**
         * Adds a Subtab to the form. In order for your subtab to appear on your form, there must be at least one object assigned to the subtab. Otherwise, the subtab will not appear.
         * @restriction Server SuiteScript only
         * @governance none
         * @param {Object} options
         * @param {string} options.id  The script id for the subtab. The id must be in lowercase, contain no spaces. If you are adding the subtab to an existing page, include the prefix custpage.
         * @param {string} options.label The UI label for the subtab
         * @param {string} [options.tab] The tab under which to display this subtab. If empty, it is added to the main tab.
         * @return {Tab}
         * @throws {SuiteScriptError} SSS_MISSING_REQD_ARGUMENT when id or label parameter is missing
         *
         * @since 2015.2
         */
        this.addSubtab = function(options) {
            if (options.id === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.addSubtab: Missing a required argument: id"
                );
            }
            if (options.label === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.addSubtab: Missing a required argument: label"
                );
            }
            var subtab = Object.assign({}, Tab);
            subtab.id = options.id;
            subtab.label = options.label;
            if (options.tab) {
                subtab.tab = options.tab;
            }
            this.subtabs.push(subtab);
            return subtab;
        };

        /**
         * Adds a Tab to the form
         * @restriction Server SuiteScript only
         * @governance none
         * @param {Object} options
         * @param {string} options.id  The script id for the Tab. The internal ID must be in lowercase and contain no spaces. If you are adding the tab to an existing page, include the prefix custpage.
         * @param {string} options.label The UI label for the tab
         * @return {Tab}
         * @throws {SuiteScriptError} SSS_MISSING_REQD_ARGUMENT when id or label parameter is missing
         *
         * @since 2015.2
         */
        this.addTab = function(options) {
            if (options.id === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.addTab: Missing a required argument: id"
                );
            }
            if (options.label === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.addTab: Missing a required argument: label"
                );
            }
            var tab = Object.assign({}, Tab);
            tab.id = options.id;
            tab.label = options.label;
            this.tabs.push(tab);
            return tab;
        };

        /**
         * Adds a Reset button to the form
         * @restriction Server SuiteScript only
         * @governance none
         * @param {Object} [options]
         * @param {string} [options.label]  The UI label used for this button. If no label is provided, the label defaults to Reset.
         * @return {Button}
         *
         * @since 2015.2
         */
        this.addResetButton = function(options) {
            var button = Object.assign({}, Button);
            if (options.label === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.addResetButton: Missing a required argument: label"
                );
            }
            button.label = options.label;
            this.buttons.push(button);
            return button;
        };

        /**
         * Adds a Submit button to the form
         * @restriction Server SuiteScript only
         * @governance none
         * @param {Object} [options]
         * @param {string} [options.label] The UI label for this button. If no label is provided, the label defaults to Save.
         * @return {Button}
         *
         * @since 2015.2
         */
        this.addSubmitButton = function(options) {
            var button = Object.assign({}, Button);
            if (options.label === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.addSubmitButton: Missing a required argument: label"
                );
            }
            button.label = options.label;
            this.buttons.push(button);
            return button;
        };

        /**
         * Gets a Button object from its script id
         * @restriction Server SuiteScript only
         * @governance none
         * @param {Object} options
         * @param {string} options.id The script id of the button. ID must be in lowercase and contain no spaces.
         * @return {Button}
         * @throws {SuiteScriptError} SSS_MISSING_REQD_ARGUMENT when id parameter is missing
         *
         * @since 2015.2
         */
        this.getButton = function(options) {
            if (options.id === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.getButton: Missing a required argument: options.id"
                );
            }
            var buttonIndex = getElementIndexById(this.buttons, options.id);
            return buttonIndex === -1 ? null : this.buttons[buttonIndex];
        };

        /**
         * Gets a Field object from its script id
         * @restriction Server SuiteScript only
         * @governance none
         * @param {Object} options
         * @param {string} options.id The script id of the field. ID must be in lowercase and contain no spaces.
         * @return {Field}
         * @throws {SuiteScriptError} SSS_MISSING_REQD_ARGUMENT when id parameter is missing
         *
         * @since 2015.2
         */
        this.getField = function(options) {
            if (options.id === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.getField: Missing a required argument: options.id"
                );
            }
            var fieldIndex = getElementIndexById(this.fields, options.id);
            return fieldIndex === -1 ? null : this.fields[fieldIndex];
        };

        /**
         * Gets a Subtab object from its script id
         * @restriction Server SuiteScript only
         * @governance none
         * @param {Object} options
         * @param {string} options.id  The script id of the subtab. ID must be in lowercase and contain no spaces.
         * @return {Tab}
         * @throws {SuiteScriptError} SSS_MISSING_REQD_ARGUMENT when id parameter is missing
         *
         * @since 2015.2
         */
        this.getSubtab = function(options) {
            if (options.id === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.getSubtab: Missing a required argument: options.id"
                );
            }
            var subtabIndex = getElementIndexById(this.subtabs, options.id);
            return subtabIndex === -1 ? null : this.subtabs[subtabIndex];
        };

        /**
         * Gets a Subtab object from its script id
         * @restriction Server SuiteScript only
         * @governance none
         * @param {Object} options
         * @param {string} options.id  The script id for the tab. ID must be in lowercase and contain no spaces.
         * @return {Tab}
         * @throws {SuiteScriptError} SSS_MISSING_REQD_ARGUMENT when id parameter is missing
         *
         * @since 2015.2
         */
        this.getTab = function(options) {
            if (options.id === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.getTab: Missing a required argument: options.id"
                );
            }
            var tabIndex = getElementIndexById(this.tabs, options.id);
            return tabIndex === -1 ? null : this.tabs[tabIndex];
        };

        /**
         * Returns an array that contains all the tabs in a form.
         * @restriction Server SuiteScript only
         * @governance none
         * @return {Array<Tab>}
         *
         * @since 2015.2
         */
        this.getTabs = function() {
            return this.tabs
            .map(function(tab) { return tab.id; })
            .filter(function(id) { return id !== undefined; });
        };

        /**
         * Gets a Sublist object from its script id
         * @restriction Server SuiteScript only
         * @governance none
         * @param {Object} options
         * @param {string} options.id The script id of the Sublist. ID must be in lowercase and contain no spaces.
         * @return {Sublist}
         * @throws {SuiteScriptError} SSS_MISSING_REQD_ARGUMENT when id parameter is missing
         *
         * @since 2015.2
         */
        this.getSublist = function(options) {
            if (options.id === undefined) {
                throw validateFail(
                    "error.SuiteScriptError",
                    "SSS_MISSING_REQD_ARGUMENT",
                    "Form.getSublist: Missing a required argument: options.id"
                );
            }
            var sublistIndex = getElementIndexById(this.sublists, options.id);
            return sublistIndex === -1 ? null : this.sublists[sublistIndex];
        };

        /**
         * Inserts a field before another field
         * @restriction Server SuiteScript only
         * @governance none
         * @param {Object} options
         * @param {Field} options.field The field to insert
         * @param {string} options.nextfield Id of the field before which the field is inserted.
         * @return {void}
         * @throws {SuiteScriptError} SSS_MISSING_REQD_ARGUMENT when field or nextfield parameter is missing
         *
         * @since 2015.2
         */
        this.insertField = function(options) {
            moveElement(
                this.fields,
                getElementIndexById(this.fields, options.field.id),
                getElementIndexById(this.fields, options.nextfield)
            );
        };

        /**
         * Inserts a sublist before another sublist
         * @restriction Server SuiteScript only
         * @governance none
         * @param {Object} options
         * @param {Sublist} options.sublist Sublist to insert
         * @param {string} options.nextsublist Id of the sublist before which the sublist is inserted.
         * @return {void}
         * @throws {SuiteScriptError} SSS_MISSING_REQD_ARGUMENT when sublist or nextsublist parameter is missing
         *
         * @since 2015.2
         */
        this.insertSublist = function(options) {
            moveElement(
                this.sublists,
                getElementIndexById(this.sublists, options.sublist.id),
                getElementIndexById(this.sublists, options.nextsublist)
            );
        };

        /**
         * Inserts a subtab before another subtab
         * @restriction Server SuiteScript only
         * @governance none
         * @param {Object} options
         * @param {Subtab} options.subtab Subtab to insert
         * @param {string} options.nextsub Id of the subtab before which the subtab is inserted.
         * @return {void}
         * @throws {SuiteScriptError} SSS_MISSING_REQD_ARGUMENT when subtab or nextsub parameter is missing
         *
         * @since 2015.2
         */
        this.insertSubtab = function(options) {
            moveElement(
                this.subtabs,
                getElementIndexById(this.subtabs, options.subtab.id),
                getElementIndexById(this.subtabs, options.nextsub)
            );
        };

        /**
         * Inserts a Tab before another tab
         * @restriction Server SuiteScript only
         * @governance none
         * @param {Object} options
         * @param {Tab} options.tab Tab to insert
         * @param {string} options.nexttab  Id of the tab before which the tab is inserted.
         * @return {void}
         * @throws {SuiteScriptError} SSS_MISSING_REQD_ARGUMENT when tab or nexttab parameter is missing
         *
         * @since 2015.2
         */
        this.insertTab = function(options) {
            moveElement(
                this.tabs,
                getElementIndexById(this.tabs, options.tab.id),
                getElementIndexById(this.tabs, options.nexttab)
            );
        };

        /**
         * Removes a button.
         * @restriction Server SuiteScript only
         * @governance none
         * @param {Object} options
         * @param {string} options.id Script id of the button to remove. The ID must be in lowercase and contain no spaces.
         * @return {void}
         * @throws {SuiteScriptError} SSS_MISSING_REQD_ARGUMENT when id parameter is missing
         *
         * @since 2015.2
         */
        this.removeButton = function(options) {
            this.buttons.splice(getElementIndexById(this.buttons, options.id), 1);
        };

        /**
         * Set the default values of many fields at once
         * @restriction Server SuiteScript only
         * @governance none
         * @param {Object} options
         * @param {Array<Object>} options.values Array of name/value pairs that map field names to field values.
         * @return {void}
         * @throws {SuiteScriptError} SSS_MISSING_REQD_ARGUMENT when values parameter is missing
         *
         * @since 2015.2
         */
        this.updateDefaultValues = function(options) {
            for (var fieldId in options.values) {
                this.fields[getElementIndexById(this.fields, fieldId)].defaultValue = options.values[fieldId];
            }
        };

        /**
         * The file cabinet ID of client script file to be used in this form.
         * @name Form#clientScriptFileId
         * @type {number}
         * @throws {SuiteScriptError} PROPERTY_VALUE_CONFLICT When clientScriptModulePath property was set beforehand
         *
         * @since 2015.2
         */
        this.clientScriptFileId = undefined;
        /**
         * The file path of client script file to be used in this form.
         * @name Form#clientScriptModulePath
         * @type {string}
         * @throws {SuiteScriptError} PROPERTY_VALUE_CONFLICT When clientScriptFileId property was set beforehand
         *
         * @since 2015.2
         */
        this.clientScriptModulePath = undefined;
        /**
         * Returns the object type name
         * @restriction Server SuiteScript only
         * @governance none
         * @return {string}
         *
         * @since 2015.2
         */
        this.toString = function() {
            return "serverWidget.Form";
        };

        /**
         * get JSON format of the object
         * @restriction Server SuiteScript only
         * @governance none
         * @return {Object}
         *
         * @since 2015.2
         */        
        this.toJSON = function() {
            return {"title": this.title};
        };
    }
    /**
     * Enumeration that holds the values for supported field types. This enum is used to set the value of the type parameter when Form.addField(options) is called.
     *
     * Consider the following as you work with these field types:
     * The FILE field type is available only for Suitelets and will appear on the main tab of the Suitelet page. FILE fields cannot be added to tabs, subtabs, sublists, or field groups and are not allowed on existing pages.
     * The INLINEHTML and RICHTEXT field types are not supported with Sublist.addField(options).
     * The IMAGE field type is available only for fields that appear on list/staticlist sublists. You cannot specify an IMAGE field on a form.
     * The MULTISELECT field type is not supported by SuiteScript 2.0 Suitelets.
     * Radio buttons that are inside one container are exclusive. The method addField on form has an optional parameter container. For an example, see FieldGroup.label.
     * @enum {string}
     * @readonly
     */
    function serverWidgetFieldType() {
        this.CHECKBOX = 'CHECKBOX';
        this.CURRENCY = 'CURRENCY';
        this.DATE = 'DATE';
        this.DATETIME = 'DATETIME';
        this.DATETIMETZ = 'DATETIMETZ';
        this.EMAIL = 'EMAIL';
        this.FILE = 'FILE';
        this.FLOAT = 'FLOAT';
        this.HELP = 'HELP';
        this.IMAGE = 'IMAGE';
        this.INLINEHTML = 'INLINEHTML';
        this.INTEGER = 'INTEGER';
        this.LABEL = 'LABEL';
        this.LONGTEXT = 'LONGTEXT';
        this.MULTISELECT = 'MULTISELECT';
        this.PASSWORD = 'PASSWORD';
        this.PERCENT = 'PERCENT';
        this.PHONE = 'PHONE';
        this.RADIO = 'RADIO';
        this.RICHTEXT = 'RICHTEXT';
        this.SELECT = 'SELECT';
        this.TEXTAREA = 'TEXTAREA';
        this.TEXT = 'TEXT';
        this.TIMEOFDAY = 'TIMEOFDAY';
        this.URL = 'URL';
    }
    /**
     * Enumeration that holds the string values for supported page link types on a form. This enum is used to set the value of the type parameter when Form.addPageLink(options) is called.
     * BREADCRUMB - Link appears on the top-left corner after the system bread crumbs
     * CROSSLINK - Link appears on the top-right corner.
     * @enum {string}
     * @readonly
     *
     */
    function serverWidgetFormPageLinkType() {
        this.BREADCRUMB = 'BREADCRUMB';
        this.CROSSLINK = 'CROSSLINK';
    }
    /**
     * Enumeration that holds the string values for valid sublist types. This enum is used to define the type parameter when Form.addSublist(options) is called.
     * INLINEEDITOR and EDITOR:
     * These types of sublists are both fully editable. The only difference between these types is their appearance in the UI:
     *
     * With an inline editor sublist, a new line is displayed at the bottom of the list after existing lines. To add a line, a user working in the UI clicks inside the new line and adds a value to each column as appropriate. Examples of this style include the Item sublist on the sales order record and the Expense sublist on the expense report record.
     * With an editor sublist, a user in the UI adds a new line by working with fields that are displayed above the existing sublist lines. This style is not common on standard NetSuite record types.
     *
     * LIST: This type of sublist has a fixed number of lines. You can update an existing line, but you cannot add lines to it.
     *
     * To make a field within a LIST type sublist editable, use Field.updateDisplayType(options) and the enum serverWidget.FieldDisplayType to update the field display type to ENTRY.
     * STATICLIST: This type of sublist is read-only. It cannot be edited in the UI, and it is not available for scripting.
     * @enum {string}
     * @readonly
     */
    function serverWidgetSublistType() {
        this.EDITOR = 'EDITOR';
        this.INLINEEDITOR = 'INLINEEDITOR';
        this.LIST = 'LIST';
        this.STATICLIST = 'STATICLIST';
    }

    function validateFail(type, name, message) {
        return {
            "type": type,
            "name": name,
            "message": message,
            "cause": {
                "name": name,
                "message": message
            }
        };
    }

    function getElementIndexById(arr, id) {
        return arr.findIndex(function(element) { return element.id === id; });
    }

    function moveElement(arr, fromIndex, toIndex) {
        var element = arr[fromIndex];
        arr.splice(fromIndex, 1);
        arr.splice(toIndex, 0, element);
    }

    return new Form();
});